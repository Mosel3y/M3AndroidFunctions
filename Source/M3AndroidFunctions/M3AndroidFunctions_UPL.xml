<?xml version="1.0" encoding="utf-8"?>
<!--
  M3 Android Functions
  (c) 2018 Mark Whitty
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <init>
    <log text="M3AndroidFunctions init"/>
    <setBoolFromProperty result="bShowTitleBar" ini="Engine" section="/Script/M3AndroidFunctions.M3AndroidFunctionsSettings" property="bShowTitleBar" default="false"/>
    <setBoolFromProperty result="bAddCameraPermission" ini="Engine" section="/Script/AndroidFunctions.AndroidFunctionsSettings" property="bAddCameraPermission" default="false"/>

  </init>

  <resourceCopies>
            <copyDir src="$S(PluginDir)/xml"
          dst = "$S(BuildDir)/res/xml" />   
  </resourceCopies>

  <androidManifestUpdates>
    <!-- Theme -->
    <if condition="bShowTitleBar">
      <true>
        <addAttribute tag="activity" name="android:theme" value="@android:style/Theme.Black.NoTitleBar"/>  
      </true>
    </if>
    <!-- Permissions -->
    <if condition="bAddCameraPermission">
      <true>
        <addPermission android:name="android.permission.CAMERA"/> 
      </true>
    </if>
    <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/> 

    <!-- Camera Support -->
    <!-- create provider -->
    <setElement result="Provider" value="provider" />
    <addAttribute tag="$Provider" name="android:name" value="android.support.v4.content.FileProvider" />
    <addAttribute tag="$Provider" name="android:authorities" value="${applicationId}.provider" />
    <addAttribute tag="$Provider" name="android:exported" value="false" />
    <addAttribute tag="$Provider" name="android:grantUriPermissions" value="true" />


    <!-- create meta data -->
    <setElement result="ProviderMetaData" value="meta-data" />
    <addAttribute tag="$ProviderMetaData" name="android:name" value="android.support.FILE_PROVIDER_PATHS" />
    <addAttribute tag="$ProviderMetaData" name="android:resource" value="@xml/file_paths" />


    <!-- add meta data to provider -->
    <addElement tag="$Provider" name="ProviderMetaData" />

    <!-- add provider to application -->
    <addElement tag="application" name="Provider" />
  </androidManifestUpdates>

  <!-- optional additions to the GameActivity imports in GameActivity.java -->
  <gameActivityImportAdditions>
    <insert>
      import android.app.Activity;
      import android.net.Uri;
      import android.os.Environment;
      import android.app.Activity;
      import android.content.Intent;
      import android.content.ActivityNotFoundException;
      import android.provider.MediaStore;
      import java.io.IOException;
      import java.util.Locale;
      import android.support.v4.content.FileProvider;
      import android.graphics.Bitmap;
      import java.io.OutputStream;
      import java.io.BufferedOutputStream;
      import java.io.FileOutputStream;
    </insert>
  </gameActivityImportAdditions>

  <gameActivityOnCreateAdditions>
      <if condition="bShowTitleBar">
        <true>
          <insert>
          <!-- Theme -->
            if(android.os.Build.VERSION.SDK_INT >= 19) {
            try {
            View decorView = getWindow().getDecorView();
            decorView.setSystemUiVisibility(
            View.SYSTEM_UI_FLAG_LAYOUT_STABLE
            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
            } catch (Exception e) {}
            }
          </insert>
        </true>
      </if>
  </gameActivityOnCreateAdditions>

  <gameActivityClassAdditions>
    <insert>
      public static final int REQUEST_IMAGE_CAPTURE = 7;
      public static final int REQUEST_IMAGE_SELECT = 8;
      String imageFilePath;

      public void AndroidThunkJava_setStatusBarVisibility(boolean inVisibility)
      {
        if (inVisibility)
        { //Show UI
          _activity.runOnUiThread(new Runnable()
          {
            @Override
            public void run()
            {
              View decorView = getWindow().getDecorView();
              decorView.setSystemUiVisibility(
              View.SYSTEM_UI_FLAG_LAYOUT_STABLE
              | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
              | View.SYSTEM_UI_FLAG_VISIBLE);
              //int uiOptions = View.SYSTEM_UI_FLAG_VISIBLE;
              //decorView.setSystemUiVisibility(uiOptions);
            }
          });
        }
        else
        { //Hide UI
          _activity.runOnUiThread(new Runnable()
          {
            @Override
            public void run()
            {
              View decorView = getWindow().getDecorView();
              int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;
              decorView.setSystemUiVisibility(uiOptions);
            }
          });
        }
      }

      public String AndroidThunkJava_getIntentStringExtra(String keyName)
      {
        if (getIntent().hasExtra(keyName)){
        return getIntent().getStringExtra(keyName);
      }
        return "not found";
      }

      public void AndroidThunkJava_setPortrait()
      {
        _activity.setRequestedOrientation( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED );
        _activity.setRequestedOrientation( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT );
      }

      public void AndroidThunkJava_setLandscape()
      {
        _activity.setRequestedOrientation( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED );
        _activity.setRequestedOrientation( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE );
      }
      
      public static boolean isPackageInstalled(String packageName, PackageManager packageManager) 
      {
      try {
        return packageManager.getApplicationInfo(packageName, 0).enabled;
      }
      catch (PackageManager.NameNotFoundException e) {
        return false;
          }
      }

      public boolean AndroidThunkJava_isPackageInstalled(String packageName)
      {
        return isPackageInstalled(packageName, this.getPackageManager());
      }
      
      public boolean AndroidThunkJava_openExternalApp(String packageName, String[] stringExtraKeys, String[] stringExtraValues)
      {
            boolean isInstalled = isPackageInstalled(packageName, this.getPackageManager());
            
            if (isInstalled) {
            PackageManager pm = this.getPackageManager();
                try {
                  Intent newAppIntent = pm.getLaunchIntentForPackage(packageName);
                  for(int i=0; i &lt; stringExtraKeys.length; i++){
                    newAppIntent.putExtra(stringExtraKeys[i], stringExtraValues[i]);
                  }
                    if (null != newAppIntent) 
                  {
                    startActivity(newAppIntent);
                  }
                }
                catch (ActivityNotFoundException e) {
                    return false;
                }
                return true;
                } 
                else 
                {
                return false;
                }
      }

      public boolean AndroidThunkJava_deviceHasCamera()
      {
        PackageManager pm = this.getPackageManager();
        return (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY));
      }

      private File createImageFile() throws IOException 
      {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String fileName = "IMG_" + timeStamp;
        File storageDir =  getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(fileName, ".jpg", storageDir);
        imageFilePath = image.getAbsolutePath();
        return image;
      }

      public void AndroidThunkJava_openNativeCamera()
      {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
          File imageFile = null;
          try { 
            imageFile = createImageFile();
          } catch (IOException e) { 
            Log.debug("=== IOException creating image ===");
          }
          if (imageFile != null) {
            Uri imageUri = FileProvider.getUriForFile(this, getPackageName() +".provider", imageFile);
            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
          }
        }
      }

      public void AndroidThunkJava_openGallery()
      {
        Intent choosePictureIntent = new Intent();
        choosePictureIntent.setType("image/*");
        choosePictureIntent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(choosePictureIntent, "Select Image"), REQUEST_IMAGE_SELECT); 
      }

      public static native void onImageCaptured(String imagePath);
      
    </insert>
  </gameActivityClassAdditions>

  <gameActivityOnActivityResultAdditions>
    <insert>
      if (requestCode == REQUEST_IMAGE_CAPTURE) {
		if (resultCode == Activity.RESULT_OK ) {
			Log.debug("=== Returned from camera ===");
			onImageCaptured(imageFilePath);
        }
	}

       if (requestCode == REQUEST_IMAGE_SELECT) {
		if (resultCode == Activity.RESULT_OK ) {
		   Uri uri = data.getData();
		   File file = null;
		   try {
			Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), uri);
			file = createImageFile();
			if (file != null) {
			 OutputStream os = new BufferedOutputStream(new FileOutputStream(file));
			 bitmap.compress(Bitmap.CompressFormat.JPEG, 80, os);
			 os.close();
			 onImageCaptured(imageFilePath);
			}
		   } catch (IOException e) {
			Log.debug("=== IOException creating image ===");
		   }
	   }
      }
    </insert>
  </gameActivityOnActivityResultAdditions>

</root>